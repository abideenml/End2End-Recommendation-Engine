'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Animate = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var React = _interopRequireWildcard(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var AnimateStage = Object.freeze({
  animate: 'animate',
  static: 'static',
  prep: 'prep'
});

// Set inner layer to be flex to avoid collapsing margins
var innerLayerStyle = { display: 'flex', flexDirection: 'column' };
var transitionStyle = function transitionStyle(duration) {
  return {
    transitionProperty: 'opacity, height',
    transitionTimingFunction: 'ease',
    overflow: 'hidden',
    transitionDuration: duration + 'ms'
  };
};

var Animate = exports.Animate = function (_React$Component) {
  _inherits(Animate, _React$Component);

  function Animate() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, Animate);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Animate.__proto__ || Object.getPrototypeOf(Animate)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      animateStage: AnimateStage.static,
      animateProps: _this.props.show && !_this.props.appear ? { height: 'auto', opacity: 1 } : { height: 0, opacity: 0 },
      renderChildren: _this.props.children,
      componentHeight: 0,
      props: _extends({}, _this.props, {
        show: _this.props.appear ? !_this.props.show : _this.props.show
      })
    }, _this._transitionStart = function (_ref2) {
      var componentHeight = _ref2.componentHeight;
      var _this$state$props = _this.state.props,
          show = _this$state$props.show,
          type = _this$state$props.type;

      var isFade = type === 'fade';
      if (show) {
        _this.setState({
          animateProps: { height: isFade ? 'auto' : 0, opacity: 0 },
          animateStage: AnimateStage.animate,
          componentHeight: componentHeight
        }, _this._requestNewFrame(function () {
          _this.setState({
            animateProps: { height: isFade ? 'auto' : componentHeight, opacity: 1 }
          });
        }));
      } else {
        _this.setState({
          animateProps: { height: isFade ? 'auto' : componentHeight, opacity: 1 },
          animateStage: AnimateStage.animate,
          componentHeight: componentHeight
        }, _this._requestNewFrame(function () {
          _this.setState({
            animateProps: { height: isFade ? 'auto' : 0, opacity: 0 }
          });
        }));
      }
    }, _this._handleTransitionEnd = function (event) {
      var _this$props = _this.props,
          onAnimateComplete = _this$props.onAnimateComplete,
          show = _this$props.show;
      // Prevent side-effect of capturing parent transition events

      if (event.target === _this._outerLayerNode) {
        onAnimateComplete && onAnimateComplete();
        _this.setState({
          animateProps: show ? { height: 'auto', opacity: 1 } : { height: 0, opacity: 0 },
          animateStage: AnimateStage.static
        });
      }
    }, _this._requestNewFrame = function (cb) {
      window.requestAnimationFrame(function () {
        window.requestAnimationFrame(function () {
          if (_this._mounted) {
            cb();
          }
        });
      });
    }, _this._setOuterLayerNode = function (elementRef) {
      _this._outerLayerNode = _reactDom2.default.findDOMNode(elementRef);
    }, _this._setInnerLayerNode = function (elementRef) {
      var innerLayerNode = _reactDom2.default.findDOMNode(elementRef);
      if (innerLayerNode instanceof window.HTMLElement) {
        var _height = innerLayerNode.getBoundingClientRect().height;
        _this._transitionStart({ componentHeight: _height });
      }
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(Animate, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this._mounted = true;
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this._mounted = false;
    }
  }, {
    key: 'render',
    value: function render() {
      var _state = this.state,
          _state$animateProps = _state.animateProps,
          height = _state$animateProps.height,
          opacity = _state$animateProps.opacity,
          animateStage = _state.animateStage,
          renderChildren = _state.renderChildren,
          _state$props = _state.props,
          show = _state$props.show,
          duration = _state$props.duration;


      var isStatic = animateStage === AnimateStage.static;
      var isAnimate = animateStage === AnimateStage.animate;

      var outerLayerStyle = isAnimate ? _extends({ height: height, opacity: opacity }, transitionStyle(duration)) : { height: height, opacity: opacity };

      if (isStatic) {
        return show ? React.createElement(
          'div',
          null,
          React.createElement(
            'div',
            { style: innerLayerStyle },
            renderChildren
          )
        ) : null;
      } else {
        return React.createElement(
          'div',
          { onTransitionEnd: this._handleTransitionEnd, ref: this._setOuterLayerNode, style: outerLayerStyle },
          React.createElement(
            'div',
            { ref: this._setInnerLayerNode, style: innerLayerStyle },
            renderChildren
          )
        );
      }
    }
  }], [{
    key: 'getDerivedStateFromProps',
    value: function getDerivedStateFromProps(nextProps, prevState) {
      if (nextProps.show !== prevState.props.show) {
        if (prevState.animateStage === AnimateStage.static) {
          return {
            animateStage: AnimateStage.prep,
            renderChildren: nextProps.show ? nextProps.children : prevState.props.children,
            props: nextProps
          };
        } else {
          return {
            animateStage: AnimateStage.animate,
            animateProps: nextProps.show ? { height: prevState.componentHeight, opacity: 1 } : { height: 0, opacity: 0 },
            props: nextProps
          };
        }
      } else {
        return {
          props: nextProps,
          renderChildren: nextProps.children
        };
      }
    }
  }]);

  return Animate;
}(React.Component);

Animate.defaultProps = {
  duration: 250,
  type: 'slide'
};
exports.default = Animate;
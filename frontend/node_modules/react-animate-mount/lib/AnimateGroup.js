'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var React = _interopRequireWildcard(_react);

var _Animate = require('./Animate');

var _mergeDiff = require('./utils/mergeDiff');

var _mergeDiff2 = _interopRequireDefault(_mergeDiff);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var AnimateGroup = function (_React$Component) {
  _inherits(AnimateGroup, _React$Component);

  function AnimateGroup() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, AnimateGroup);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = AnimateGroup.__proto__ || Object.getPrototypeOf(AnimateGroup)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      isAnimating: false,
      renderChildren: React.Children.toArray(_this.props.children).map(function (child) {
        return {
          status: _mergeDiff.Status.static,
          child: child
        };
      })
    }, _this._handleEachAnimateComplete = function () {
      var isAnimating = _this.state.isAnimating;
      var _this$props = _this.props,
          onAnimateComplete = _this$props.onAnimateComplete,
          children = _this$props.children;

      if (isAnimating) {
        onAnimateComplete && onAnimateComplete();
        _this.setState({
          renderChildren: React.Children.toArray(children).map(function (child) {
            return {
              status: _mergeDiff.Status.static,
              child: child
            };
          }),
          isAnimating: false
        });
      }
    }, _this._requestNewFrame = function (cb) {
      window.requestAnimationFrame(function () {
        window.requestAnimationFrame(function () {
          if (_this._mounted) {
            cb();
          }
        });
      });
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(AnimateGroup, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this._mounted = true;
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this._mounted = false;
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          type = _props.type,
          duration = _props.duration;
      var renderChildren = this.state.renderChildren;

      return renderChildren.map(function (_ref2) {
        var status = _ref2.status,
            child = _ref2.child;

        return React.createElement(
          _Animate.Animate,
          {
            appear: status !== _mergeDiff.Status.static,
            duration: duration,
            key: child.key,
            onAnimateComplete: _this2._handleEachAnimateComplete,
            show: status !== _mergeDiff.Status.out,
            type: type
          },
          child
        );
      });
    }
  }], [{
    key: 'getDerivedStateFromProps',
    value: function getDerivedStateFromProps(nextProps, prevState) {
      var newChildrenWithState = (0, _mergeDiff2.default)(prevState.renderChildren.map(function (childWithState) {
        return childWithState.child;
      }), React.Children.toArray(nextProps.children));

      if (!newChildrenWithState.every(function (child) {
        return child.status === _mergeDiff.Status.static;
      })) {
        return { renderChildren: newChildrenWithState, isAnimating: true };
      } else {
        return null;
      }
    }
  }]);

  return AnimateGroup;
}(React.Component);

exports.default = AnimateGroup;